# .github/workflows/makefile-lint.yml
---
name: Makefile Lint
on:  # yamllint disable-line rule:truthy
  push:
    branches: ["main", "master", "stable"]
  pull_request:
    branches: ["main", "master", "stable", "feature-*", "patch-*", "HOTFIX-*"]

permissions: {}  # Setting default permissions to none for enhanced security

jobs:
  makefile-lint:
    permissions:
      contents: read
      statuses: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Apt-Get Dependencies
        run: |
          sudo apt-get update || exit 1
          sudo apt-get install -y yamllint golang-go pandoc || exit 1
          ERR_MSG_STUB="Go installation failed."
          ERR_DETAILS="file=.github/workflows/makefile-lint.yml,line=25,endLine=30,title=FAILURE"
          ERR_MSG_LINE="::error ${ERR_DETAILS}::ERROR ${ERR_MSG_STUB}"
          go version || { printf "%s\n" "${ERR_MSG_LINE}"; exit 1; }
      - name: Lint Workflow YAML
        if: ${{ success() }}
        run: |
          yamllint ${{ vars.YAML_ARGS }} .github/workflows/makefile-lint.yml
      - uses: actions/checkout@v4
      - name: Install checkmake
        if: ${{ success() }}
        env:
          BUILDER_NAME: "makefile-lint"
          BUILDER_EMAIL: "no-reply@localhost"
        run: |
          git clone --depth 1 --branch 0.2.2 https://github.com/mrtazz/checkmake.git checkmake
          cd checkmake
          EXPECTED_SHA="48ab7819837d1bdfcbac58e301478a06efebf4a8" # v0.2.2
          ACTUAL_SHA=$(git rev-parse HEAD)
          if [ "$EXPECTED_SHA" != "$ACTUAL_SHA" ]; then
            ERR_MSG_STUB="Checkmake repository hash verification failed."
            ERR_DETAILS="file=.github/workflows/makefile-lint.yml,line=42,endLine=51,title=FAILURE"
            ERR_MSG_LINE="::error ${ERR_DETAILS}::ERROR ${ERR_MSG_STUB}"
            printf "%s\n" "${ERR_MSG_LINE}"
            exit 1;
          fi
          make || { \
            ERR_MSG_STUB="Checkmake build failed." \
            ERR_DETS="file=.github/workflows/makefile-lint.yml,line=52,endLine=57,title=FAILURE" \
            ERR_MSG_LINE="::error ${ERR_DETS}::ERROR ${ERR_MSG_STUB}" \
            printf "%s\n" "${ERR_MSG_LINE}" \
            exit 1 \
             ;}
          cd ..
      - name: Get makefiles Files
        id: makefiles
        shell: bash
        run: |
          FILES=$(git ls-files --exclude-standard -- Makefile 2>/dev/null)
          if [ -z "$FILES" ]; then
            printf "%s\n" "No Makefiles found."
            printf "%s\n" "files=" >> "$GITHUB_OUTPUT"
          else
            printf "%s\n" "Makefiles found:"
            printf "%s\n" "$FILES"
            # Replace line breaks with spaces for GitHub Action Output
            FILES="${FILES//$'\n'/ }"
            printf "%s\n" "files=$FILES" >> "$GITHUB_OUTPUT"
          fi
        if: ${{ success() }}
      - name: Lint Makefiles Files
        run: |
          TOOL_PATH=".github/tool_checkmake.sh"
          if [ ! -x "$TOOL_PATH" ]; then
            { \
            ERR_MSG_STUB="$TOOL_PATH not found or not executable." \
            ERR_DETS="file=.github/workflows/makefile-lint.yml,line=79,endLine=88,title=FAILURE" \
            ERR_MSG_LINE="::error ${ERR_DETS}::ERROR ${ERR_MSG_STUB}" \
            printf "%s\n" "${ERR_MSG_LINE}" \
            exit 1 \
            ;}
          fi
          FILE="${{ steps.makefiles.outputs.files }}" ;
          printf "::group::%s\n" "${FILE}" ;
          ERR_MSG_STUB="Linting failed."
          ERR_DETS="file=.github/workflows/makefile-lint.yml,line=89,endLine=97,title=FAILURE"
          ERR_MSG_LINE="::error ${ERR_DETS}::ERROR ${ERR_MSG_STUB}"
          "$TOOL_PATH" "${FILE}" || { printf "%s\n" "${ERR_MSG_LINE}"; exit 1; } ;
          printf "::endgroup::\n" ; unset FILE 2>/dev/null || true ;
        if: ${{ !cancelled() && steps.makefiles.outputs.files != '' }}
