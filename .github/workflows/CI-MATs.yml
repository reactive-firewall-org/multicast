---
name: CI-MATs
description: "Continuous Integration workflow for Minimal Acceptance Tests (MATs)."
run-name: Minimal Acceptance Tests
#
# This workflow runs after successful completion of CI-BUILD to ensure
# that the codebase meets minimal acceptance criteria.
#
# Jobs:
# - check_build: Verifies CI-BUILD success and sets up environment
# - MATS: Runs Machine Acceptance Tests across Python versions
# - MATS_STATUS: Reports final test status
#
# Triggers:
# - Automatically on CI-BUILD workflow completion
#
# Required Secrets: None
#
# Dependencies:
# - Requires successful completion of CI-BUILD workflow

on:  # yamllint disable-line rule:truthy
  workflow_run:
    workflows: ["CI-BUILD"]
    types:
      - completed

# Declare default permissions as none.
permissions: {}

jobs:
  check_build:
    permissions:
      actions: read
      pull-requests: read
      checks: write
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      head_branch: ${{ steps.get_sha.outputs.head_branch }}
      sha: ${{ steps.get_sha.outputs.head_sha }}
      branch_name: ${{ steps.get_env.outputs.branch }}
      parent_sha: ${{ steps.get_env.outputs.parent_sha }}
      branch_ref: ${{ steps.get_env.outputs.branch_ref }}
      trigger_id: ${{ steps.get_env.outputs.trigger_id }}
      build_environment: "Testing"
    steps:
      - id: check
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should_run=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_run=false" >> "$GITHUB_OUTPUT"
          fi
      - id: get_sha
        run: |
          SHA_VALUE=$(gh api "${{ github.event.workflow_run.artifacts_url }}" --jq '.head_branch')
          if [[ -n "$SHA_VALUE" ]]; then
            echo "head_branch=$SHA_VALUE" >> "$GITHUB_OUTPUT"
            echo "head_sha=${{ github.event.workflow_run.head_sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "head_branch={}" >> "$GITHUB_OUTPUT"  # Default fallback
            echo "head_sha=${{ github.sha }}" >> "$GITHUB_OUTPUT"  # Default fallback
          fi
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Checkout target commit
        run: git checkout ${{ steps.get_sha.outputs.head_sha }}
      - id: get_env
        run: |
          ENV_VALUE=$(gh api "${{ github.event.workflow_run.url }}" --jq '.id')
          if [[ -n "$ENV_VALUE" ]]; then
            echo "trigger_id=$ENV_VALUE" >> "$GITHUB_OUTPUT"
          else
            echo "trigger_id=null" >> "$GITHUB_OUTPUT"  # Default fallback
          fi
          echo "branch=$(git symbolic-ref --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "parent_sha=$(git show-ref --heads --hash stable)" >> "$GITHUB_OUTPUT"
          echo "branch_ref=$(git symbolic-ref HEAD)" >> "$GITHUB_OUTPUT"

  MATS:
    permissions:
      actions: read
      contents: read
      pull-requests: read
      statuses: write
    needs: check_build
    if: ${{ !cancelled() && (needs.check_build.outputs.should_run == 'true') }}
    runs-on: ubuntu-latest
    environment: ${{ needs.check_build.outputs.build_environment }}
    defaults:
      run:
        shell: bash
    timeout-minutes: 8
    strategy:
      matrix:
        python-version: ["${{ vars.PYTHON_OLD_MIN }}", "${{ vars.PYTHON_DEFAULT }}", "${{ vars.PYTHON_EXPERIMENTAL }}"]
    outputs:
      mats_status: ${{ steps.tests.outcome }}
    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      LANG: "en_US.utf-8"
    steps:
      - name: Checkout repository for MATs with ${{ matrix.python-version }}
        uses: ./.github/actions/checkout-and-rebuild
        with:
          sha: ${{ needs.check_build.outputs.sha }}
          python-version: ${{ matrix.python-version }}
          path: ${{ github.workspace }}
      - name: Run Tests for python ${{ matrix.python-version }}
        id: tests
        run: make -j1 -f Makefile test-mats ;
      - name: Summerize MATs for python ${{ matrix.python-version }}
        id: sumerize-mats
        run: |
          echo "- [x] MATS succeeded with python version ${{ matrix.python-version }}" >> "$GITHUB_STEP_SUMMARY"
        if: ${{ success() }}
      - name: Summerize MATs for python ${{ matrix.python-version }} (FAILED)
        id: sumerize-mats
        run: |
          echo "- [ ] MATS FAILED with python version ${{ matrix.python-version }}" >> "$GITHUB_STEP_SUMMARY"
        if: ${{ failure() }}
      - name: Post-Clean
        id: post
        run: make -j1 -f Makefile clean || true ;
        if: ${{ always() }}

  MATS_STATUS:
    permissions:
      actions: read
      pull-requests: read
    needs: [check_build, MATS]
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    outputs:
      passedMATs: ${{ steps.check_status.outputs.mats_success }}
      didBUILD: ${{ needs.check_build.outputs.should_run }}
    steps:
      - id: check_status
        run: |
          if [[ "${{ needs.MATS.result }}" == "success" ]]; then
            echo "mats_success=true" >> "$GITHUB_OUTPUT"
          else
            echo "mats_success=false" >> "$GITHUB_OUTPUT"
          fi
