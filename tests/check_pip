#! /bin/bash
# Disclaimer of Warranties.
# A. YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT, TO THE EXTENT PERMITTED BY
#    APPLICABLE LAW, USE OF THIS SHELL SCRIPT AND ANY SERVICES PERFORMED
#    BY OR ACCESSED THROUGH THIS SHELL SCRIPT IS AT YOUR SOLE RISK AND
#    THAT THE ENTIRE RISK AS TO SATISFACTORY QUALITY, PERFORMANCE, ACCURACY AND
#    EFFORT IS WITH YOU.
#
# B. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SHELL SCRIPT
#    AND SERVICES ARE PROVIDED "AS IS" AND "AS AVAILABLE", WITH ALL FAULTS AND
#    WITHOUT WARRANTY OF ANY KIND, AND THE AUTHOR OF THIS SHELL SCRIPT'S LICENSORS
#    (COLLECTIVELY REFERRED TO AS "THE AUTHOR" FOR THE PURPOSES OF THIS DISCLAIMER)
#    HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH RESPECT TO THIS SHELL SCRIPT
#    SOFTWARE AND SERVICES, EITHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
#    NOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF
#    MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE,
#    ACCURACY, QUIET ENJOYMENT, AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# C. THE AUTHOR DOES NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE
#    THE AUTHOR's SOFTWARE AND SERVICES, THAT THE FUNCTIONS CONTAINED IN, OR
#    SERVICES PERFORMED OR PROVIDED BY, THIS SHELL SCRIPT WILL MEET YOUR
#    REQUIREMENTS, THAT THE OPERATION OF THIS SHELL SCRIPT OR SERVICES WILL
#    BE UNINTERRUPTED OR ERROR-FREE, THAT ANY SERVICES WILL CONTINUE TO BE MADE
#    AVAILABLE, THAT THIS SHELL SCRIPT OR SERVICES WILL BE COMPATIBLE OR
#    WORK WITH ANY THIRD PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES,
#    OR THAT DEFECTS IN THIS SHELL SCRIPT OR SERVICES WILL BE CORRECTED.
#    INSTALLATION OF THIS THE AUTHOR SOFTWARE MAY AFFECT THE USABILITY OF THIRD
#    PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES.
#
# D. YOU FURTHER ACKNOWLEDGE THAT THIS SHELL SCRIPT AND SERVICES ARE NOT
#    INTENDED OR SUITABLE FOR USE IN SITUATIONS OR ENVIRONMENTS WHERE THE FAILURE
#    OR TIME DELAYS OF, OR ERRORS OR INACCURACIES IN, THE CONTENT, DATA OR
#    INFORMATION PROVIDED BY THIS SHELL SCRIPT OR SERVICES COULD LEAD TO
#    DEATH, PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE,
#    INCLUDING WITHOUT LIMITATION THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
#    NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, LIFE SUPPORT OR
#    WEAPONS SYSTEMS.
#
# E. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY THE AUTHOR
#    SHALL CREATE A WARRANTY. SHOULD THIS SHELL SCRIPT OR SERVICES PROVE DEFECTIVE,
#    YOU ASSUME THE ENTIRE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#    Limitation of Liability.
# F. TO THE EXTENT NOT PROHIBITED BY APPLICABLE LAW, IN NO EVENT SHALL THE AUTHOR
#    BE LIABLE FOR PERSONAL INJURY, OR ANY INCIDENTAL, SPECIAL, INDIRECT OR
#    CONSEQUENTIAL DAMAGES WHATSOEVER, INCLUDING, WITHOUT LIMITATION, DAMAGES
#    FOR LOSS OF PROFITS, CORRUPTION OR LOSS OF DATA, FAILURE TO TRANSMIT OR
#    RECEIVE ANY DATA OR INFORMATION, BUSINESS INTERRUPTION OR ANY OTHER
#    COMMERCIAL DAMAGES OR LOSSES, ARISING OUT OF OR RELATED TO YOUR USE OR
#    INABILITY TO USE THIS SHELL SCRIPT OR SERVICES OR ANY THIRD PARTY
#    SOFTWARE OR APPLICATIONS IN CONJUNCTION WITH THIS SHELL SCRIPT OR
#    SERVICES, HOWEVER CAUSED, REGARDLESS OF THE THEORY OF LIABILITY (CONTRACT,
#    TORT OR OTHERWISE) AND EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGES. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION
#    OR LIMITATION OF LIABILITY FOR PERSONAL INJURY, OR OF INCIDENTAL OR
#    CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY TO YOU. In no event
#    shall THE AUTHOR's total liability to you for all damages (other than as may
#    be required by applicable law in cases involving personal injury) exceed
#    the amount of five dollars ($5.00). The foregoing limitations will apply
#    even if the above stated remedy fails of its essential purpose.
################################################################################
#
# check_pip: Audit and validate Python requirements files.
# This, best-effort, script audits and validates Python requirements files using tools like pip-audit and pip-licenses.
# It accomplishes the following tasks:
# 1. Sets up a safe execution environment with resource limits and UTF-8 encoding.
# 2. Checks for the existence and executability of required commands.
# 3. Implements a lock mechanism to prevent concurrent executions.
# 4. Gathers all requirements.txt files from the project using git.
# 5. Audits requirements files for security vulnerabilities using pip-audit.
# 6. Checks licenses of dependencies using pip-licenses.
# 7. Reports any findings and cleans up before exiting.
#
# Usage Summary:
#   ./tests/check_pip [--fix]
# Use the '--fix' option to enable auto-correction of vulnerabilities.
#
# Exit Code Summary:
# The script uses the EXIT_CODE variable to track exit conditions:
# -   0: Successful execution.
# -   1: General failure.
# -   3: git ls-tree command failed.
# -   4: pip-audit failed.
# -   5: pip-licenses failed.
# -   6: pip install/unistall failed.
# -  40: Missing valid repository or source structure.
# - 126: Script already in progress or command not executable.
# - 129: Received SIGHUP signal.
# - 130: Received SIGINT signal (Ctrl+C).
# - 131: Received SIGQUIT signal.
# - 137: Received SIGABRT signal.
# - 143: Received SIGTERM signal.

# Try to safely setup and fail fast if unable.
ulimit -t 600
# setting the path may break brain-dead CI that uses crazy paths
# PATH="/bin:/sbin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
umask 137

# force utf-8 for checking in script
export LC_CTYPE="${LC_CTYPE:-en_US.UTF-8}"
# set remaining variables
LOCK_FILE="${TMPDIR:-/tmp}/org.pak.multicast.pip-check-shell"

# Function to check if a command exists.

# USAGE:
#	~$ check_command CMD
# Arguments:
# CMD (Required) -- Name of the command to check
# Results:
#	exits 64 -- missing required argument
#	exits 126 -- check complete and has failed, can not find given command.
#	returns successful -- check complete and command found to be executable.
function check_command() {
	test -z "$1" && { printf "%s\n" "Error: command name is required to check for existence." >&2 ; exit 64 ; } ;
	local cmd="$1" ;
	test -x "$(command -v ${cmd})" || { printf "%s\n" "Error: Required command '$cmd' is not found." >&2 ; exit 126 ; } ;
}  # end check_command()
# propagate/export function to sub-shells
export -f check_command

# Check required commands
check_command grep ;
check_command python3 ;
check_command git ;
check_command sed ;
check_command tee ;
check_command pip ;
# check_command pip-audit ; # optional
check_command pip-licenses ;
# CEP-5 locking
hash -p ./.github/tool_shlock_helper.sh shlock || exit 255 ;
check_command shlock ;

# Set default exitcode to failure until sure we won't need to abort
EXIT_CODE=1

# end of bootstraping, use functions below this point

function cleanup() {
	rm -f ${LOCK_FILE} 2>/dev/null || : ; wait ;
	# unset when done
	unset LOCK_FILE 2>/dev/null || : ;
	hash -d shlock 2>/dev/null || : ;
}

function handle_signals() {
	if [[ ( $(shlock -f ${LOCK_FILE} -p $$ ) -eq 0 ) ]] ; then
		EXIT_CODE=0
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 129 ;' SIGHUP || EXIT_CODE=129
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 143 ;' SIGTERM || EXIT_CODE=143
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 131 ;' SIGQUIT || EXIT_CODE=131
		# SC2173 - https://github.com/koalaman/shellcheck/wiki/SC2173
		#trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 1 ;' SIGSTOP || EXIT_CODE=7
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 130 ;' SIGINT || EXIT_CODE=130
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit 137 ;' SIGABRT || EXIT_CODE=137
		trap 'cleanup 2>/dev/null || rm -f ${LOCK_FILE} 2>/dev/null || true ; wait ; exit ${EXIT_CODE} ;' EXIT || EXIT_CODE=1
	else
		# shellcheck disable=SC2046
		printf "\t%s\n" "Check Setup Scripts Tests Coverage already in progress by "$(head "${LOCK_FILE}") >&2 ;
		exit 126 ;
	fi
}

handle_signals

# lazy defined variables should be defined now that this is the only script instance.

# set the script-file to check_pip
SCRIPT_FILE="tests/check_pip"
# Set pip-audit options
AUDIT_OPTIONS="--progress-spinner off --desc on --requirement"
# List of Allowed Licenses delimited by semicolon ;
ALLOW_LICENSES="Public Domain;Apache Software License;MIT License;BSD License;Python Software Foundation License;The Unlicense (Unlicense);Mozilla Public License 2.0 (MPL 2.0);"
# Set pip-licenses options
LICENSE_OPTIONS="--from=mixed"
# Set pip options
PIP_COMMON_FLAGS="--require-virtualenv --use-pep517 --exists-action s --upgrade --upgrade-strategy only-if-needed --quiet"
# Set Env and OS specific pip options
if [[ $( \uname -s ) == "*arwin" ]] ; then
	PIP_ENV_FLAGS="--break-system-packages"
	LICENSE_OPTIONS="--python python3 ${LICENSE_OPTIONS} --ignore-packages certifi"
else
	PIP_ENV_FLAGS=""
fi ;
# Enable auto-fix if '--fix' argument is provided
if [[ "$1" == "--fix" ]]; then
	AUDIT_OPTIONS="--fix --strict ${AUDIT_OPTIONS}"
	printf "%s\n" "Auto-fix enabled."
fi

# lazy defined functions should be defined now that this is the only script instance.

function report_summary() {
	printf "::group::%s\n" "Results" ;
	# Improved reporting based on EXIT_CODE
	case "${EXIT_CODE}" in
		0) printf "::notice title=OK::%s\n" "OK: Found no detected requirements errors." ;;
		1) printf "::error file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=CHECK-PIP::%s\n" "FAIL: General failure during script execution." >&2 ;;
		3) printf "::error file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=CONFIGURATION::%s\n" "FAIL: Gathering repostory's requirements failed." >&2 ;;  # git ls-tree command failed
		4) printf "::error file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=SECURITY::%s\n" "FAIL: pip-audit detected security vulnerabilities." >&2 ;;
		5) printf "::error file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=LICENSE::%s\n" "FAIL: pip-licenses detected license issues." >&2 ;;
		6) printf "::error file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=INSTALL::%s\n" "FAIL: pip install failed." >&2 ;;
		126) printf "::warning file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=SKIPPED::%s\n" "SKIP: Unable to continue script execution." >&2 ;;
		*) printf "::error file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=FAILED::%s\n" "FAIL: Detected requirements errors." >&2 ;;
	esac
	printf "::endgroup::\n" ;
}

function navigate_dirs_by_git() {
	if _TEST_ROOT_DIR=$(git rev-parse --show-superproject-working-tree 2>/dev/null); then
		if [ -z "${_TEST_ROOT_DIR}" ]; then
			_TEST_ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
		fi
		printf "::debug::%s\n" "Found ${_TEST_ROOT_DIR} ..." ;
	else
		printf "::error file=${SCRIPT_FILE},line=${BASH_LINENO:-0},title=${FUNCNAME:-$0}::%s\n" "FAIL: missing valid repository or source structure" >&2
		EXIT_CODE=40
	fi
}

function check_license_when_given_req() {
	local SUB_CODE=${EXIT_CODE-0}
	umask 007
	printf "::debug::%s\n" "need venv ..." ;
	# Create a temporary directory for the virtual environment
	temp_dir=$(mktemp -d)

	# Enter the temporary directory
	cd "$temp_dir"

	# Create a virtual environment using venv
	python3 -m venv venv

	# Activate the virtual environment
	source venv/bin/activate

	umask 037
	# 2>&1 >/dev/null
	python3 -m pip install $PIP_COMMON_FLAGS $PIP_ENV_FLAGS "pip-licenses>=5.0" || SUB_CODE=6 ;
	wait ;
	printf "::debug::%s\n" "venv setup ... (${SUB_CODE})" ;
	# Install the given Python modules using pip
	for module in $@ ; do
		printf "::debug::%s\n" "Checking license from package '$module' ..." ;
		REQ_SPEC=$(grep -F "$module" <(cat <"${_TEST_ROOT_DIR}"/$req_file | sed -E -e '/^[[:space:]]*$/d' | sed -E -e '/^[#]+.*$/d') | grep -m1 -F "$module" )
		ERR_MSG="pip install '$module' failed for $req_file." ;
		if [[ ("${SUB_CODE}" -eq 0) ]] && python3 -m pip install $PIP_COMMON_FLAGS $PIP_ENV_FLAGS "${REQ_SPEC};" 2>/dev/null ;
		then
			printf "::debug::%s\n" "Fetched license from package '$module' ..." ;
		else
			[[ ("${SUB_CODE}" -eq 0) ]] && SUB_CODE=6 && \
			printf "::warning file=${req_file},line=1,col=1,title=PIP::%s\n" "${ERR_MSG}" >&2
		fi
		unset ERR_MSG 2>/dev/null || : ;
	done

	# Use pip-licenses to list the licenses of the installed packages
	{ pip-licenses $LICENSE_OPTIONS --allow-only="${ALLOW_LICENSES}" || SUB_CODE=5 ;} ; wait ;

	# Deactivate the virtual environment
	deactivate

	# return to starting dir
	cd "${OLDPWD}" ;

	# Remove the temporary directory and all of its contents
	rm -rf "${temp_dir}" || : ;
	umask 137 ;
	wait ;
	return $SUB_CODE
}

# THIS IS THE ACTUAL TEST DIR USED (update _TEST_ROOT_DIR as needed)
_TEST_ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null) ;
navigate_dirs_by_git

printf "::debug::%s\n" "Reading from repository ${_TEST_ROOT_DIR} ..." ;
# Get a list of files to check using git ls-tree with filtering (and careful shell globing)
FILES_TO_CHECK=$(git ls-tree -r --full-tree --name-only HEAD -- "${_TEST_ROOT_DIR}"/test/requirements.txt "${_TEST_ROOT_DIR}"/*-requirements.txt "${_TEST_ROOT_DIR}/requirements.txt" 2>/dev/null || EXIT_CODE=3)

# THIS IS THE ACTUAL TEST
printf "::debug::%s\n" "Starting checks ..." ;
# Iterate over files and run checks
for req_file in $FILES_TO_CHECK; do
	printf "::group::%s\n" "Checking ${req_file}" ;
	if [[ ( -x $(command -v pip-audit) ) ]] && [[ ("${EXIT_CODE}" -eq 0) ]] ; then
		printf "::debug::%s\n" "Auditing ${req_file} for security vulnerabilities ..."
		{ pip-audit $AUDIT_OPTIONS "${req_file}" || EXIT_CODE=4 ;} ; wait ;
	fi ;
	if [[ ("${EXIT_CODE}" -eq 0) ]] ; then
		printf "::debug::%s\n" "Checking licenses in $req_file ..." ;
		# filter for only pkg from requirements file
		PKG_TO_CHECK=$( { cat <"$req_file" | tr '><=' '=' | cut -d\= -f 1-1 | sed -E -e '/^[[:space:]]*$/d' | sed -E -e '/^[#]+.*$/d' | xargs -I{} grep -o -m1 -F "{}" "$req_file" | grep -ovE "^pip|setuptools|wheel|build|hypothesis|certifi$" | sort -u ; wait ;} 2>/dev/null );
		check_license_when_given_req ${PKG_TO_CHECK} ; EXIT_CODE=$?
	else
		printf "::error file=${req_file},line=${BASH_LINENO:-1},title=REQUIREMENTS::%s\n" "FAIL: Found requirements errors." >&2 ;
	fi
	printf "::endgroup::\n" ;
done

printf "::debug::%s\n" "Summary reporting ..." ;
report_summary

printf "::debug::%s\n" "Cleaning up ..." ;
cleanup || rm -f ${LOCK_FILE} 2>/dev/null || : ;

# unset when done
unset _TEST_ROOT_DIR 2>/dev/null || : ;
unset AUDIT_OPTIONS 2>/dev/null || : ;
unset ALLOW_LICENSES 2>/dev/null || : ;
unset LICENSE_OPTIONS 2>/dev/null || : ;

wait ;
printf "::debug::%s\n" "Check-pip done." ;
# Exit with the appropriate code
exit ${EXIT_CODE:-255} ;
