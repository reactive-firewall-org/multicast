#! /bin/bash
# Disclaimer of Warranties.
# A. YOU EXPRESSLY ACKNOWLEDGE AND AGREE THAT, TO THE EXTENT PERMITTED BY
#    APPLICABLE LAW, USE OF THIS SHELL SCRIPT AND ANY SERVICES PERFORMED
#    BY OR ACCESSED THROUGH THIS SHELL SCRIPT IS AT YOUR SOLE RISK AND
#    THAT THE ENTIRE RISK AS TO SATISFACTORY QUALITY, PERFORMANCE, ACCURACY AND
#    EFFORT IS WITH YOU.
#
# B. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SHELL SCRIPT
#    AND SERVICES ARE PROVIDED "AS IS" AND "AS AVAILABLE", WITH ALL FAULTS AND
#    WITHOUT WARRANTY OF ANY KIND, AND THE AUTHOR OF THIS SHELL SCRIPT'S LICENSORS
#    (COLLECTIVELY REFERRED TO AS "THE AUTHOR" FOR THE PURPOSES OF THIS DISCLAIMER)
#    HEREBY DISCLAIM ALL WARRANTIES AND CONDITIONS WITH RESPECT TO THIS SHELL SCRIPT
#    SOFTWARE AND SERVICES, EITHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
#    NOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF
#    MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE,
#    ACCURACY, QUIET ENJOYMENT, AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS.
#
# C. THE AUTHOR DOES NOT WARRANT AGAINST INTERFERENCE WITH YOUR ENJOYMENT OF THE
#    THE AUTHOR's SOFTWARE AND SERVICES, THAT THE FUNCTIONS CONTAINED IN, OR
#    SERVICES PERFORMED OR PROVIDED BY, THIS SHELL SCRIPT WILL MEET YOUR
#    REQUIREMENTS, THAT THE OPERATION OF THIS SHELL SCRIPT OR SERVICES WILL
#    BE UNINTERRUPTED OR ERROR-FREE, THAT ANY SERVICES WILL CONTINUE TO BE MADE
#    AVAILABLE, THAT THIS SHELL SCRIPT OR SERVICES WILL BE COMPATIBLE OR
#    WORK WITH ANY THIRD PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES,
#    OR THAT DEFECTS IN THIS SHELL SCRIPT OR SERVICES WILL BE CORRECTED.
#    INSTALLATION OF THIS THE AUTHOR SOFTWARE MAY AFFECT THE USABILITY OF THIRD
#    PARTY SOFTWARE, APPLICATIONS OR THIRD PARTY SERVICES.
#
# D. YOU FURTHER ACKNOWLEDGE THAT THIS SHELL SCRIPT AND SERVICES ARE NOT
#    INTENDED OR SUITABLE FOR USE IN SITUATIONS OR ENVIRONMENTS WHERE THE FAILURE
#    OR TIME DELAYS OF, OR ERRORS OR INACCURACIES IN, THE CONTENT, DATA OR
#    INFORMATION PROVIDED BY THIS SHELL SCRIPT OR SERVICES COULD LEAD TO
#    DEATH, PERSONAL INJURY, OR SEVERE PHYSICAL OR ENVIRONMENTAL DAMAGE,
#    INCLUDING WITHOUT LIMITATION THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
#    NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, LIFE SUPPORT OR
#    WEAPONS SYSTEMS.
#
# E. NO ORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY THE AUTHOR
#    SHALL CREATE A WARRANTY. SHOULD THIS SHELL SCRIPT OR SERVICES PROVE DEFECTIVE,
#    YOU ASSUME THE ENTIRE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#    Limitation of Liability.
# F. TO THE EXTENT NOT PROHIBITED BY APPLICABLE LAW, IN NO EVENT SHALL THE AUTHOR
#    BE LIABLE FOR PERSONAL INJURY, OR ANY INCIDENTAL, SPECIAL, INDIRECT OR
#    CONSEQUENTIAL DAMAGES WHATSOEVER, INCLUDING, WITHOUT LIMITATION, DAMAGES
#    FOR LOSS OF PROFITS, CORRUPTION OR LOSS OF DATA, FAILURE TO TRANSMIT OR
#    RECEIVE ANY DATA OR INFORMATION, BUSINESS INTERRUPTION OR ANY OTHER
#    COMMERCIAL DAMAGES OR LOSSES, ARISING OUT OF OR RELATED TO YOUR USE OR
#    INABILITY TO USE THIS SHELL SCRIPT OR SERVICES OR ANY THIRD PARTY
#    SOFTWARE OR APPLICATIONS IN CONJUNCTION WITH THIS SHELL SCRIPT OR
#    SERVICES, HOWEVER CAUSED, REGARDLESS OF THE THEORY OF LIABILITY (CONTRACT,
#    TORT OR OTHERWISE) AND EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE
#    POSSIBILITY OF SUCH DAMAGES. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION
#    OR LIMITATION OF LIABILITY FOR PERSONAL INJURY, OR OF INCIDENTAL OR
#    CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY TO YOU. In no event
#    shall THE AUTHOR's total liability to you for all damages (other than as may
#    be required by applicable law in cases involving personal injury) exceed
#    the amount of five dollars ($5.00). The foregoing limitations will apply
#    even if the above stated remedy fails of its essential purpose.
################################################################################
#
# This script performs coverage testing on the setup.py file for the multicast project.
# It accomplishes the following tasks:
# 1. Sets up error handling and cleanup mechanisms to ensure proper execution.
# 2. Determines the test root directory based on the project structure.
# 3. Configures the coverage command for Python.
# 4. Generates test reports using the project's Makefile.
# 5. Executes setup.py with coverage, specifically checking the --name, --version, and --license options.
#    This ensures that:
#    - The package metadata is correctly read from setup.cfg
#    - The readFile function properly handles reading README.md, requirements.txt, and LICENSE.md
#    - The package requirements are correctly parsed
#    - The package classifiers are properly set
# 6. Combines coverage data and generates an XML report for analysis.
# 7. Copies log files to the test reports directory for record-keeping.
#
# Exit Code Summary:
# The script uses the EXIT_CODE variable to track exit conditions:
# -   0: Successful execution.
# -   1: General failure.
# -   2: Coverage combine or XML generation failed.
# -   3: Make command failed.
# -  40: Missing valid repository or source structure.
# - 126: Script already in progress or command not executable.
# - 129: Received SIGHUP signal.
# - 130: Received SIGINT signal (Ctrl+C).
# - 131: Received SIGQUIT signal.
# - 137: Received SIGABRT signal.
# - 143: Received SIGTERM signal.
#
# The primary goal is to ensure that all parts of setup.py are executed when queried for
# basic package information, helping maintain the integrity of the package configuration
# and ensuring that the package can be properly installed and distributed.

ulimit -t 60
# setting the path may break brain-dead CI that uses crazy paths
# PATH="/bin:/sbin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
umask 137

export LC_CTYPE="${LC_CTYPE:-'en_US.UTF-8'}"

LOCK_FILE="${TMPDIR:-/tmp}/org.pak.multicast.cov-legacy-setup-shell"
EXIT_CODE=1

# Function to check if a command exists.

# USAGE:
#  ~$ check_command CMD
# Arguments:
# CMD (Required) -- Name of the command to check
# Results:
#    exits 64 -- missing required argument
#    exits 126 -- check complete and has failed, can not find given command.
#    returns successful -- check complete and command found to be executable.
function check_command() {
	test -z "$1" && { printf "%s\n" "Error: command name is required to check for existence." >&2 ; exit 64 ; } ;
	local cmd="$1" ;
	# shellcheck disable=SC2086
	test -x "$(command -v ${cmd})" || { printf "%s\n" "Error: Required command '$cmd' is not found." >&2 ; exit 126 ; } ;
}  # end check_command()
# propagate/export function to sub-shells
export -f check_command

# Set up CEP-5 shlock helper
hash -p ./.github/tool_shlock_helper.sh shlock || { printf "%s\n" "Error: Failed to register shlock helper. CEP-5 locking will not work." >&2 ; exit 78 ; } ;

# Check required commands
check_command grep ;
check_command python3 ;
check_command make ;
check_command git ;
check_command tee ;
check_command shlock ;

LOG_FILE="test_setup_log_${PPID}.log"
ERR_FILE="test_setup_log_errors_${PPID}.log"

function cleanup() {
	rm -f ./"${LOG_FILE}" 2>/dev/null || : ;
	rm -f ./"${ERR_FILE}" 2>/dev/null || : ;
	rm -f "${LOCK_FILE}" 2>/dev/null || : ; wait ;
	hash -d shlock 2>/dev/null > /dev/null || true ;
}

if [[ ( $(shlock -f ${LOCK_FILE} -p $$ ) -eq 0 ) ]] ; then
		EXIT_CODE=0
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 129 ;' SIGHUP || EXIT_CODE=129
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 143 ;' SIGTERM || EXIT_CODE=143
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 131 ;' SIGQUIT || EXIT_CODE=131
		# SC2173 - https://github.com/koalaman/shellcheck/wiki/SC2173
		#trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 1 ;' SIGSTOP || EXIT_CODE=7
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit 130 ;' SIGINT || EXIT_CODE=130
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true || true ; wait ; exit 137 ;' SIGABRT || EXIT_CODE=137
		# shellcheck disable=SC2086
		trap 'cleanup 2>/dev/null || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || true ; wait ; exit ${EXIT_CODE} ;' EXIT || EXIT_CODE=1
else
		# shellcheck disable=SC2046
		printf "\t%s\n" "Check Setup Scripts Tests Coverage already in progress by "$(head "${LOCK_FILE}") >&2 ;
		exit 126 ;
fi

# this is how test files are found:

# THIS IS THE ACTUAL TEST
if _TEST_ROOT_DIR=$(git rev-parse --show-superproject-working-tree 2>/dev/null); then
	if [ -z "${_TEST_ROOT_DIR}" ]; then
		_TEST_ROOT_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
	fi
else
	printf "\t%s\n" "FAIL: missing valid repository or source structure" >&2
	EXIT_CODE=40
fi

if [[ ( -x $(command -v python3) ) ]] ; then
	export COVERAGE_CMD="$(command -v python3) -m coverage run --include=setup.py -p"
elif [[ ( -x $(command -v coverage) ) ]] ; then
	export COVERAGE_CMD="$(command -v coverage) run --include=setup.py -p"
fi

make -C "${_TEST_ROOT_DIR}" -j1 -f Makefile test-reports || EXIT_CODE=3 ;
printf "%s\n" "Start of Log:" > "${_TEST_ROOT_DIR}"/"${LOG_FILE}" ; wait ;
printf "\n%s\n\n" "Start of Setup.py Test one-shot:" >> "${_TEST_ROOT_DIR}"/"${LOG_FILE}" ; wait ;

{ "${COVERAGE_CMD} setup.py --name --version --license" 2>"${_TEST_ROOT_DIR}"/"${ERR_FILE}" | grep --count -oE "^([0-9].){2}[0-9](a0)?$" 2>"${_TEST_ROOT_DIR}"/"${ERR_FILE}" || printf "%s\n" "FAIL: Setup.py version check failed" 1>&2 ;} 2>"${_TEST_ROOT_DIR}"/"${ERR_FILE}" >> "${_TEST_ROOT_DIR}"/"${LOG_FILE}" & : ;

wait ;
printf "%s\n\n" "End of Setup.py Test one-shot" >> "${_TEST_ROOT_DIR}"/"${LOG_FILE}" ; wait ;

# sloppy workaround for now
if [[ ( -x $(command -v python3) ) ]] ; then
	$(command -v python3) -m coverage combine 2>"${_TEST_ROOT_DIR}"/"${ERR_FILE}" || EXIT_CODE=2 ;
	$(command -v python3) -m coverage xml --include=setup.py,multicast -o "${_TEST_ROOT_DIR}"/test-reports/coverage_setup.xml || EXIT_CODE=2 ;
elif [[ ( -x $(command -v coverage) ) ]] ; then
	$(command -v coverage) combine 2>"${_TEST_ROOT_DIR}"/"${ERR_FILE}" || EXIT_CODE=2 ;
	$(command -v coverage) xml --include=setup.py,multicast -o "${_TEST_ROOT_DIR}"/test-reports/coverage_setup.xml || EXIT_CODE=2 ;
fi

wait ;
cp -f ./"${LOG_FILE}" "${_TEST_ROOT_DIR}"/test-reports/legacy_setup_version_log.log 2>./"${ERR_FILE}" ; wait ;
printf "%s\n" "" | tee -a "${_TEST_ROOT_DIR}"/test-reports/legacy_setup_version_log.log ; wait ;

if [[ ( -r "${_TEST_ROOT_DIR}"/"${ERR_FILE}" ) ]] ; then
	printf "%s\n" "Errors: " | tee -a "${_TEST_ROOT_DIR}"/test-reports/legacy_setup_version_log.log ; wait ;
	cat <"${_TEST_ROOT_DIR}"/"${ERR_FILE}" | tee -a "${_TEST_ROOT_DIR}"/test-reports/legacy_setup_version_log.log ; wait ;
fi

unset COVERAGE_CMD 2>/dev/null || : ;
unset _TEST_ROOT_DIR 2>/dev/null || : ;

cleanup || rm -f "${LOCK_FILE}" 2>/dev/null > /dev/null || : ; wait ;

# shellcheck disable=SC2086
exit ${EXIT_CODE:-255} ;
